{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josga\\\\Desktop\\\\CalendarP\\\\Frontend\\\\src\\\\components\\\\CalendarWeekView.jsx\";\nimport React from 'react';\nimport './../styles/calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daysOfWeek = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];\nfunction convertHourToInterval(hour) {\n  // Convertir la hora a un formato de 24 horas\n  let start = hour.toString().padStart(2, '0') + ':00';\n  let end = (hour + 1).toString().padStart(2, '0') + ':00';\n  return `${start} - ${end}`;\n}\nconst CalendarWeekView = ({\n  events\n}) => {\n  const newEvents = processEvents(events);\n  // Crear una cuadrícula para las horas y los días\n  const renderGrid = () => {\n    const hours = Array.from({\n      length: 12\n    }, (_, i) => i + 2); // Ejemplo: de 8 a 20 horas\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Hora\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: hours.map(hour => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: convertHourToInterval(hour)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"day\",\n            children: renderEvent(day, hour)\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this))]\n        }, hour, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Función para renderizar un evento en una celda específica\n  const renderEvent = (day, hour) => {\n    const events = newEvents[day.toUpperCase()] ? newEvents[day.toUpperCase()][hour] : undefined;\n    return events ? events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event\",\n      children: [event.title, ' ', event.description && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" - \", event.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 35\n      }, this)]\n    }, `${event.title}-${event.startHour}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this)) : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-week-view\",\n    children: renderGrid()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n};\n_c = CalendarWeekView;\nconst processEvents = events => {\n  const mapper = {};\n  events.forEach(event => {\n    if (!mapper[event.day]) mapper[event.day] = [];\n    for (let i = event.startHour; i < event.endHour; i++) {\n      mapper[event.day].push({\n        title: event.title,\n        day: event.day,\n        description: event.description,\n        startHour: i,\n        endHour: i + 1\n      });\n    }\n  });\n  const finalMapper = {};\n  Object.entries(mapper).forEach(data => {\n    const [day, events] = data;\n    events.forEach(event => {\n      if (!finalMapper[day]) finalMapper[event.day] = [];\n      if (!finalMapper[day][event.startHour]) finalMapper[day][event.startHour] = [];\n      finalMapper[day.toUpperCase()][event.startHour].push(event);\n    });\n  });\n  return finalMapper;\n};\nexport default CalendarWeekView;\nvar _c;\n$RefreshReg$(_c, \"CalendarWeekView\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","daysOfWeek","convertHourToInterval","hour","start","toString","padStart","end","CalendarWeekView","events","newEvents","processEvents","renderGrid","hours","Array","from","length","_","i","children","fileName","_jsxFileName","lineNumber","columnNumber","map","day","className","renderEvent","toUpperCase","undefined","event","title","description","startHour","_c","mapper","forEach","endHour","push","finalMapper","Object","entries","data","$RefreshReg$"],"sources":["C:/Users/josga/Desktop/CalendarP/Frontend/src/components/CalendarWeekView.jsx"],"sourcesContent":["import React from 'react';\nimport './../styles/calendar.css';\n\nconst daysOfWeek = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];\n\nfunction convertHourToInterval(hour) {\n  // Convertir la hora a un formato de 24 horas\n  let start = hour.toString().padStart(2, '0') + ':00';\n  let end = (hour + 1).toString().padStart(2, '0') + ':00';\n\n  return `${start} - ${end}`;\n}\n\nconst CalendarWeekView = ({ events }) => {\n  const newEvents = processEvents(events);\n  // Crear una cuadrícula para las horas y los días\n  const renderGrid = () => {\n    const hours = Array.from({ length: 12 }, (_, i) => i + 2); // Ejemplo: de 8 a 20 horas\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Hora</th>\n            {daysOfWeek.map((day) => (\n              <th key={day}>{day}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {hours.map((hour) => (\n            <tr key={hour}>\n              <td>{convertHourToInterval(hour)}</td>\n              {daysOfWeek.map((day) => (\n                <td key={day} className=\"day\">\n                  {renderEvent(day, hour)}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  // Función para renderizar un evento en una celda específica\n  const renderEvent = (day, hour) => {\n    const events = newEvents[day.toUpperCase()]\n      ? newEvents[day.toUpperCase()][hour]\n      : undefined;\n    return events\n      ? events.map((event) => (\n          <div className=\"event\" key={`${event.title}-${event.startHour}`}>\n            {event.title}{' '}\n            {event.description && <span> - {event.description}</span>}\n          </div>\n        ))\n      : null;\n  };\n\n  return <div className=\"calendar-week-view\">{renderGrid()}</div>;\n};\n\nconst processEvents = (events) => {\n  const mapper = {};\n\n  events.forEach((event) => {\n    if (!mapper[event.day]) mapper[event.day] = [];\n\n    for (let i = event.startHour; i < event.endHour; i++) {\n      mapper[event.day].push({\n        title: event.title,\n        day: event.day,\n        description: event.description,\n        startHour: i,\n        endHour: i + 1,\n      });\n    }\n  });\n\n  const finalMapper = {};\n\n  Object.entries(mapper).forEach((data) => {\n    const [day, events] = data;\n\n    events.forEach((event) => {\n      if (!finalMapper[day]) finalMapper[event.day] = [];\n      if (!finalMapper[day][event.startHour])\n        finalMapper[day][event.startHour] = [];\n\n      finalMapper[day.toUpperCase()][event.startHour].push(event);\n    });\n  });\n\n  return finalMapper;\n};\n\nexport default CalendarWeekView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}