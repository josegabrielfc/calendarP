{"ast":null,"code":"import materiasResponse from './../mocks/materias.json';\nimport horarioMateriaResponse from './../mocks/horario_materia.json';\nexport const getSubjectsFromAPI = async () => {\n  const {\n    materias\n  } = materiasResponse; //Comentar luego\n\n  //const materiasResponse = await fetch(\"localhost:8080/materias\", {\n  //  method: \"GET\"\n  //});\n  //const { materias } = materiasResponse as MateriaResponse;\n\n  return mergeSubjectsWithSchedule(materias);\n};\nconst mergeSubjectsWithSchedule = subjects => {\n  const schedulePromises = subjects.map(subject => getAvailableSchedulesForSubject(subject.id).then(schedules => {\n    return {\n      ...subject,\n      schedules\n    };\n  }));\n  return Promise.all(schedulePromises);\n};\nexport const getAvailableSchedulesForSubject = subject_id => {\n  const {\n    horarios\n  } = horarioMateriaResponse;\n\n  //const horarioMateriaResponse = await fetch(`localhost:8080/horario/${subject_id}`, {\n  //  method: \"GET\"\n  //});\n  //const { horarios } = horarioMateriaResponse as HorarioMateriaResponse;\n\n  return Promise.resolve(horarios);\n};\nexport const generatePdf = async data => {\n  try {\n    // Configurar la solicitud\n    const response = await fetch('localhost/generate_pdf', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // Agregar otros headers necesarios, como tokens de autenticación si es necesario\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n\n    // Obtener los datos de la respuesta como Blob\n    const blob = await response.blob();\n\n    // Crear un URL para el Blob\n    const blobUrl = window.URL.createObjectURL(blob);\n\n    // Crear un enlace temporario y forzar la descarga\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.download = 'horario.pdf'; // Nombre del archivo a descargar\n    document.body.appendChild(link);\n    link.click();\n\n    // Limpiar\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(blobUrl);\n  } catch (error) {\n    console.error('Error al generar el PDF:', error);\n  }\n};","map":{"version":3,"names":["materiasResponse","horarioMateriaResponse","getSubjectsFromAPI","materias","mergeSubjectsWithSchedule","subjects","schedulePromises","map","subject","getAvailableSchedulesForSubject","id","then","schedules","Promise","all","subject_id","horarios","resolve","generatePdf","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","blob","blobUrl","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","error","console"],"sources":["C:/Users/josga/Desktop/CalendarP/Frontend/src/api/api.ts"],"sourcesContent":["import { Schedule, Subject, SubjectSchedule } from '../types/types';\nimport materiasResponse from './../mocks/materias.json';\nimport horarioMateriaResponse from './../mocks/horario_materia.json';\n\ninterface MateriaResponse {\n  materias: Subject[];\n}\n\ninterface HorarioMateriaResponse {\n  horarios: Schedule[];\n}\n\nexport const getSubjectsFromAPI: () => Promise<SubjectSchedule[]> =\n  async () => {\n    const { materias } = materiasResponse as MateriaResponse; //Comentar luego\n\n    //const materiasResponse = await fetch(\"localhost:8080/materias\", {\n    //  method: \"GET\"\n    //});\n    //const { materias } = materiasResponse as MateriaResponse;\n\n    return mergeSubjectsWithSchedule(materias);\n  };\n\nconst mergeSubjectsWithSchedule: (\n  subjects: Subject[]\n) => Promise<SubjectSchedule[]> = (subjects) => {\n  const schedulePromises = subjects.map((subject) =>\n    getAvailableSchedulesForSubject(subject.id).then((schedules) => {\n      return {\n        ...subject,\n        schedules,\n      };\n    })\n  );\n\n  return Promise.all(schedulePromises);\n};\n\nexport const getAvailableSchedulesForSubject: (\n  subject_id: number\n) => Promise<Schedule[]> = (subject_id) => {\n  const { horarios } = horarioMateriaResponse as HorarioMateriaResponse;\n\n  //const horarioMateriaResponse = await fetch(`localhost:8080/horario/${subject_id}`, {\n  //  method: \"GET\"\n  //});\n  //const { horarios } = horarioMateriaResponse as HorarioMateriaResponse;\n\n  return Promise.resolve(horarios);\n};\n\nexport const generatePdf = async (data) => {\n  try {\n    // Configurar la solicitud\n    const response = await fetch('localhost/generate_pdf', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        // Agregar otros headers necesarios, como tokens de autenticación si es necesario\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n\n    // Obtener los datos de la respuesta como Blob\n    const blob = await response.blob();\n\n    // Crear un URL para el Blob\n    const blobUrl = window.URL.createObjectURL(blob);\n\n    // Crear un enlace temporario y forzar la descarga\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.download = 'horario.pdf'; // Nombre del archivo a descargar\n    document.body.appendChild(link);\n    link.click();\n\n    // Limpiar\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(blobUrl);\n  } catch (error) {\n    console.error('Error al generar el PDF:', error);\n  }\n};\n"],"mappings":"AACA,OAAOA,gBAAgB,MAAM,0BAA0B;AACvD,OAAOC,sBAAsB,MAAM,iCAAiC;AAUpE,OAAO,MAAMC,kBAAoD,GAC/D,MAAAA,CAAA,KAAY;EACV,MAAM;IAAEC;EAAS,CAAC,GAAGH,gBAAmC,CAAC,CAAC;;EAE1D;EACA;EACA;EACA;;EAEA,OAAOI,yBAAyB,CAACD,QAAQ,CAAC;AAC5C,CAAC;AAEH,MAAMC,yBAEyB,GAAIC,QAAQ,IAAK;EAC9C,MAAMC,gBAAgB,GAAGD,QAAQ,CAACE,GAAG,CAAEC,OAAO,IAC5CC,+BAA+B,CAACD,OAAO,CAACE,EAAE,CAAC,CAACC,IAAI,CAAEC,SAAS,IAAK;IAC9D,OAAO;MACL,GAAGJ,OAAO;MACVI;IACF,CAAC;EACH,CAAC,CACH,CAAC;EAED,OAAOC,OAAO,CAACC,GAAG,CAACR,gBAAgB,CAAC;AACtC,CAAC;AAED,OAAO,MAAMG,+BAEW,GAAIM,UAAU,IAAK;EACzC,MAAM;IAAEC;EAAS,CAAC,GAAGf,sBAAgD;;EAErE;EACA;EACA;EACA;;EAEA,OAAOY,OAAO,CAACI,OAAO,CAACD,QAAQ,CAAC;AAClC,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOC,IAAI,IAAK;EACzC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;MACrDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;MACF,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,UAASR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC9C;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,CAAC,CAAC;;IAElC;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;;IAEhD;IACA,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGP,OAAO;IACnBI,IAAI,CAACI,QAAQ,GAAG,aAAa,CAAC,CAAC;IAC/BH,QAAQ,CAACZ,IAAI,CAACgB,WAAW,CAACL,IAAI,CAAC;IAC/BA,IAAI,CAACM,KAAK,CAAC,CAAC;;IAEZ;IACAL,QAAQ,CAACZ,IAAI,CAACkB,WAAW,CAACP,IAAI,CAAC;IAC/BH,MAAM,CAACC,GAAG,CAACU,eAAe,CAACZ,OAAO,CAAC;EACrC,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}